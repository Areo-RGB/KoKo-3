{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2020,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "es2020": true
  },
  "rules": {
    // ============================================
    // ERRORS: Build/Runtime breaking issues only
    // ============================================
    "no-undef": "error", // Undefined variables break runtime
    "react-hooks/rules-of-hooks": "error", // Hook violations break React
    "react/jsx-key": "error", // Missing keys cause React warnings

    // ============================================
    // DISABLED: Non-critical rules for AI flexibility
    // ============================================

    // Variable handling - let AI be flexible
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "no-var": "off",
    "prefer-const": "error",

    // Type safety - TypeScript handles this
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",

    // React - non-breaking
    "react/no-unescaped-entities": "off", // HTML entities handled by Next.js
    "react-hooks/exhaustive-deps": "warn", // Dependencies are AI-manageable
    "react/prop-types": "off", // TypeScript handles prop validation
    "react/display-name": "off", // Not critical for AI-generated code

    // Code style - let Prettier handle
    "object-shorthand": "warn",
    "prefer-template": "off",
    "prefer-arrow-callback": "off",

    // Next.js specific - optimization hints, not errors
    "@next/next/no-html-link-for-pages": "error",
    "@next/next/no-img-element": "off",
    "@next/next/no-page-custom-font": "off",
    "@next/next/no-sync-scripts": "off",
    "@next/next/no-title-in-document-head": "off",

    // Import/export - TypeScript + Prettier handle
    "import/no-unresolved": "error",
    "import/named": "warn",
    "import/default": "off",
    "import/namespace": "off",
    "import/no-anonymous-default-export": "off"
  },

  // ============================================
  // OVERRIDES: Contextual rules for specific patterns
  // ============================================
  "overrides": [
    {
      "files": ["components/**/*.{ts,tsx}", "app/**/_components/**/*.{ts,tsx}"],
      "rules": {
        // Client components MUST NOT import Node.js modules
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "fs",
                "message": "fs is Node.js only - cannot be used in client components"
              },
              {
                "name": "fs/promises",
                "message": "fs/promises is Node.js only - cannot be used in client components"
              },
              {
                "name": "path",
                "message": "path is Node.js only - cannot be used in client components"
              },
              {
                "name": "child_process",
                "message": "child_process is Node.js only - cannot be used in client components"
              },
              {
                "name": "os",
                "message": "os is Node.js only - cannot be used in client components"
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.test.{ts,tsx}", "*.spec.{ts,tsx}"],
      "rules": {
        // Test files can be more permissive
        "@typescript-eslint/no-explicit-any": "off",
        "no-undef": "off"
      }
    }
  ]
}
